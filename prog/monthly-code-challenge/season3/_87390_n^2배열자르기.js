/**
 * 다음 과정을 거쳐서 1차원 배열을 만들고자 한다.
 * 1. n행, n열 크기의 비어있는 2차원 배열을 만든다.
 * 2. 1~n에 대해서 다음 과정을 반복한다.
 *    - 1행 1열부터 i행 i열까지의 영역 내의 모든 빈칸을 숫자 i로 채운다.
 * 3. 1-n행을 잘라내어 모두 이어붙인 새로운 1차원 배열을 만든다.
 * 4. 새로운 1차원 배열에서 left ~ right만 남기고 나머지는 지운다.
 *
 * @param {*} n 10^7
 * @param {*} left n^2
 * @param {*} right n^2
 * @returns 주어진 과정대로 만들어진 1차원 배열
 *
 * ### 리뷰
 * - 풀이 방식은 다음과 같다.
 *   먼저 n=3일 경우의 행렬을 살펴보자.
 *   (1,1) = 1 | (1,2) = 2 | (1,3) = 3
 *   (2,1) = 2 | (2,2) = 2 | (2,3) = 3
 *   (3,1) = 3 | (3,2) = 3 | (3,3) = 3
 *   각 원소의 값은 해당 원소의 행과 열 중 큰 값에 해당하는 것을 알 수 있다.
 *   이를 활용하여 left~right까지의 값을 쉽게 구할 수 있다.
 *
 *   먼저, left~right까지의 배열을 생성한다.
 *   해당 배열을 순회하여, i번째의 실제 행과 열을 구한다.
 *   행 : ((i+left) / n) + 1
 *   열 : ((i+left) % n) + 1
 *
 *   그리고 행과 열 중 큰 수를 해당 원소의 값으로 저장한다.
 *   arr[i] = Math.max(행, 열)
 *
 * - n의 크기가 10^7인 경우,
 *   JavaScript의 배열의 최대 길이를 넘는다. (최대 길이: 2^32 -1)
 *   따라서, 직접 2차원 배열을 생성해서 접근하는 방식은 불가능하다.
 */

function solution(n, left, right) {
    return [...Array(right - left + 1)].map((_, i) => {
        const row = ~~((i + left) / n) + 1;
        const column = ((i + left) % n) + 1;
        return Math.max(row, column);
    });
}

/****** TEST CASE *******/
console.log(solution(3, 2, 5));
