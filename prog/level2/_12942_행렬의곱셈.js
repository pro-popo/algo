/**
 * 2차원 행렬을 두 개 입력 받는다.
 * 첫 번째 행렬에 두 번째 행렬을 곱한 결과를 반환하는 함수를 완성하자.
 * 이때, 입력은 곱할 수 있는 배열만 주어진다.
 *
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @returns 두 행렬을 곱한 결과
 *
 * ### 리뷰
 * - 풀이 방식은 다음과 같다.
 *   행은 arr1의 행 크기, 열은 arr2의 열 크기의 빈 배열을 생성한다.
 *   행렬의 (r,c)의 값은, 아래의 두 배열에서 동일한 인덱스에 위치한 원소들을 각각 곱한 뒤 전부 합한 값이다.
 *   - arr1의 r번째 행 즉, arr1[r]
 *   - arr2의 c번째 열 즉, arr2[_][c]
 *
 *   따라서 열의 크기만큼 반복문으로 순회하여,
 *   > sum += arr1[r][i] * arr2[i][c]
 *   위의 결과(sum)를 행렬(r,c)에 할당한다.
 */

function solution(arr1, arr2) {
    return arr1.map((_, r) =>
        arr2[0].map((_, c) =>
            arr1[r].reduce((sum, _, i) => sum + arr1[r][i] * arr2[i][c], 0),
        ),
    );
}

/****** TEST CASE *******/

console.log(
    solution(
        [
            [1, 4],
            [3, 2],
            [4, 1],
        ],
        [
            [3, 3],
            [3, 3],
        ],
    ),
);

console.log(
    solution(
        [
            [2, 3, 2],
            [4, 2, 4],
            [3, 1, 4],
        ],
        [
            [5, 4, 3],
            [2, 4, 1],
            [3, 1, 1],
        ],
    ),
);
